// +build ignore

package main

import (
	"bufio"
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	filter "github.com/tmthrgd/go-filter"
)

const jsonURL = "https://cs.chromium.org/codesearch/f/chromium/src/net/http/transport_security_state_static.json"

func main() {
	if err := main1(); err != nil {
		log.Fatal(err)
	}
}

func main1() error {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Minute)
	defer cancel()

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, jsonURL, nil)
	if err != nil {
		return err
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("server returned unexpected %s status code", resp.Status)
	}

	br := filter.NewReader(resp.Body,
		func(line []byte) bool {
			line = bytes.TrimSpace(line)
			return !(len(line) >= 2 && string(line[:2]) == "//")
		})

	var rules struct {
		Entries []struct {
			Name string

			Policy string
			//  - test: test domains.
			//  - google: Google-owned sites.
			//  - custom: entries without includeSubdomains or with HPKP/Expect-CT.
			//  - bulk-legacy: bulk entries preloaded before Chrome 50.
			//  - bulk-18-weeks: bulk entries with max-age >= 18 weeks (Chrome 50-63).
			//  - bulk-1-year: bulk entries with max-age >= 1 year (after Chrome 63).
			//  - public-suffix-requested: public suffixes preloaded at the owners
			//    request (manual).

			IncludeSubdomains bool `json:"include_subdomains"`

			Mode string
			//  "force-https" iff covered names should require HTTPS.
		}
	}
	if err := json.NewDecoder(br).Decode(&rules); err != nil {
		return err
	}

	f, err := os.Create("hsts_preload.go")
	if err != nil {
		return err
	}

	bw := bufio.NewWriter(f)
	fmt.Fprintln(bw, "// Code generated by go run generate.go. DO NOT EDIT.")
	fmt.Fprintln(bw, "//")
	fmt.Fprintf(bw, "// This file was generated at %s from\n",
		time.Now().UTC().Format(http.TimeFormat))
	fmt.Fprintf(bw, "// %s.\n", jsonURL)
	fmt.Fprintln(bw)
	fmt.Fprintln(bw, "package hsts")
	fmt.Fprintln(bw)
	fmt.Fprintln(bw, "var preloadList = map[string]bool{")

	var maxDots int
	for _, entry := range rules.Entries {
		if entry.Mode != "force-https" {
			continue
		}

		dots := strings.Count(entry.Name, ".")
		if dots > maxDots {
			maxDots = dots
		}

		fmt.Fprintf(bw, "\t%q: %t, // %s\n", entry.Name,
			entry.IncludeSubdomains, entry.Policy)
	}

	fmt.Fprintln(bw, "}")
	fmt.Fprintln(bw)
	fmt.Fprintf(bw, "const maxDots = %d\n", maxDots)
	fmt.Fprintln(bw)

	if err := bw.Flush(); err != nil {
		return err
	}

	if err := f.Sync(); err != nil {
		return err
	}

	return f.Close()
}
