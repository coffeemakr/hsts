package main

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"
	"sort"
	"strings"
	"time"

	"github.com/tmthrgd/go-filter"
)

const jsonURL = "https://chromium.googlesource.com/chromium/src/net/+/master/http/transport_security_state_static.json?format=TEXT"

func main() {
	var outputFile string
	flag.StringVar(&outputFile, "out", "", "Output file")
	flag.Parse()
	if err := writePreloadSource(outputFile); err != nil {
		log.Fatal(err)
	}
}

func writePreloadSource(outfile string) error {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Minute)
	defer cancel()

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, jsonURL, nil)
	if err != nil {
		return err
	}

	log.Println("Loading preload JSON")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("server returned unexpected %s status code", resp.Status)
	}

	br := filter.NewReader(
		base64.NewDecoder(base64.StdEncoding, resp.Body),
		func(line []byte) bool {
			line = bytes.TrimSpace(line)
			return !(len(line) >= 2 && string(line[:2]) == "//")
		})

	var rules struct {
		Entries []struct {
			Name string

			IncludeSubdomains bool `json:"include_subdomains"`

			Mode string
			//  "force-https" iff covered names should require HTTPS.
		}
	}
	if err := json.NewDecoder(br).Decode(&rules); err != nil {
		return err
	}

	log.Println("Generating rules")
	sort.Slice(rules.Entries, func(i, j int) bool {
		ei, ej := rules.Entries[i], rules.Entries[j]
		if ei.IncludeSubdomains != ej.IncludeSubdomains {
			return ei.IncludeSubdomains
		}
		return ei.Name < ej.Name
	})

	var maxDots, dots int
	names := make([]string, 0, len(rules.Entries))
	includeSubdomainsNames := make([]string, 0, len(rules.Entries))
	for _, entry := range rules.Entries {
		if entry.Mode != "force-https" {
			continue
		}
		if entry.IncludeSubdomains {
			includeSubdomainsNames = append(includeSubdomainsNames, entry.Name)
		} else {
			names = append(names, entry.Name)
		}
		dots = strings.Count(entry.Name, ".")
		if dots > maxDots {
			maxDots = dots
		}
	}

	f, err := os.Create(outfile)
	if err != nil {
		return err
	}
	defer f.Close()
	_, _ = fmt.Fprintf(f, `// Code generated by go run generate.go. DO NOT EDIT.
//)
// This file was generated from the Chromium HSTS preloaded list")
// %s.

package hsts

`, jsonURL)

	_, _ = fmt.Fprintln(f, "var domainsIncludingSubdomains = map[string]bool { ")
	for _, name := range includeSubdomainsNames {
		_, _ = fmt.Fprintf(f, "    \"%s\": true,\n", name)
	}
	_, _ = fmt.Fprintln(f, "}")
	_, _ = fmt.Fprintln(f, "var domains = map[string]bool { ")
	for _, name := range names {
		_, _ = fmt.Fprintf(f, "    \"%s\": true,\n", name)
	}
	_, _ = fmt.Fprintln(f, "}")
	_, _ = fmt.Fprintf(f, "const maxDots = %d\n", maxDots)
	return nil
}